tags:
  - name: "login"
    description: Log in
  - name: "username"
    description: Username operations
  - name: "media"
    description: Media operations
  - name: "profile"
    description: Profile operations
  - name: "likes"
    description: Likes operations
  - name: "comments"
    description: Comments operations
  - name: "follow"
    description: Follow operations
  - name: "ban"
    description: Ban operations
  - name: "stream"
    description: Stream operations
openapi: 3.0.3 
info:
  title: WASAPhoto backend REST APIs
  description: |-
    Keep in touch with your friends by sharing photos of special moments, 
    thanks to WASAPhoto! You can upload your photos directly from your PC, 
    and they will be visible to everyone following you.
  version: "0.0.1"
components:
  securitySchemes:
    bearerAuth:
      description: API authentication to authorize requests
      type: http
      scheme: bearer

  responses:
    BadRequest: 
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    InternalServerError: 
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    NotFound:
      description: Page not found.
    UsernameNotAvailable:
      description: The username is not available.
    UnauthorizedError:
      description: Access token is missing or invalid.
  parameters:
    username:
      schema: {$ref: "#/components/schemas/username"}
      name: username
      in: path 
      required: true
    userFollow:
      schema: {$ref: "#/components/schemas/username"}
      name: userFollow
      in: path 
      required: true
    userBan:
      schema: {$ref: "#/components/schemas/username"}
      name: userBan
      in: path 
      required: true
    userLike:
      schema: {$ref: "#/components/schemas/username"}
      name: userLike
      in: path 
      required: true
    photo-id:
      schema:
        description: ID of a photo
        type: integer
        example: 1
      name: photo-id
      in: path
      required: true
    comment-id:
      schema:
        description: ID of a comment
        type: integer
        example: 1
      name: comment-id
      in: path
      required: true

  schemas:
    posinteger:
      description: A positive integer
      title: Positive integer
      type: integer
      minimum: 0
      example: 1
    username:
      title: Username
      description: The username
      type: string
      pattern: |-
        ^(?=.{3,16}$)[a-zA-Z0-9._]+$
      minLength: 3 
      maxLength: 16
      example: Maria 
    access-token:
      title: Authorization-token
      description: The user identifier for the authorization.
      type: object
      properties:
        identifier:
          type: string
          description: The user identifier
          example: "abcdef012345"
          pattern: ".*"
          minLength: 3
          maxLength: 16
    id:
      description: Unique identifier.
      type: integer
      example: 1
      readOnly: true
    photo:
      title: Photo
      description: |-
        An object containing the photo file, its unique id, user that posted a caption
        and the timestamp.
      type: object
      properties:
        id: {$ref: "#/components/schemas/id"}
        photo-url: {$ref: "#/components/schemas/photoUrl"}
        timestamp: {$ref: "#/components/schemas/timestamp"}
        username: {$ref: "#/components/schemas/username"}
        caption: {$ref: "#/components/schemas/photoCaption"}
    photoCaption:
      description: The image's caption.
      type: string
      example: "Visiting CERN"
      pattern: ".*"
      minLength: 1
      maxLength: 250
    photoFile:
      type: string
      format: binary
      description: The photo file
      pattern: ".*"
      minLength: 0
      maxLength: 1000000
    photoUrl:
      type: string
      pattern: "http://.*"
      description: The url of the photo
      title: URL
      minLength: 10
      maxLength: 500
      example: http://localhost:8080/imageurl18087
    profileStats:
      title: Profile Statistics
      description: The profile statistics
      properties:
        followers: {$ref: "#/components/schemas/userArray"}
        following: {$ref: "#/components/schemas/userArray"}
    article:
      title: A post of the stream
      description: |- 
        A photo with the user that posted it, likes and comments.
      properties:
        photo: {$ref: "#/components/schemas/photo"}
        likes: {$ref: "#/components/schemas/posinteger"}
        comments: {$ref: "#/components/schemas/posinteger"}
    commentArray:
      description: An array of comments
      type: array
      items: {$ref: "#/components/schemas/comment"}
      minItems: 0
      maxItems: 10
    profile:
      title: Profile
      description: An object describing user's profile.
      type: object
      properties:
        profile-name: {$ref: "#/components/schemas/username"}
        photos:
          type: array
          description: An array of photos
          items: {$ref: "#/components/schemas/photo"}
          minItems: 0
          maxItems: 1000
        n_photos: {$ref: "#/components/schemas/posinteger"}
        stats: {$ref: "#/components/schemas/profileStats"}
    comment:
      title: Comment
      description: An object with username, text and timestamp of publication of the comment.
      type: object
      properties:
        user: {$ref: "#/components/schemas/username"}
        text: {$ref: "#/components/schemas/commentText"}
        timestamp: {$ref: "#/components/schemas/timestamp"}
        image: {$ref: "#/components/schemas/photoUrl"}
        id: {$ref: "#/components/schemas/id"}
    timestamp:
      title: Timestamp
      description: The timestamp 
      type: string
      minLength: 19
      maxLength: 19
      format: date-time
      pattern: |-
        [0-9]{1,4}-[0-9]{1,2}-[0-9]{1,2}T[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}
      example: "2022-05-23T08:00:00"
      readOnly: true
    commentText:
      type: string
      description: The text of the comment
      pattern: ".*"
      minLength: 1
      maxLength: 250
      example: Nice photo!
    userArray:
      type: array
      description: An array of users
      items: {$ref: "#/components/schemas/username"}
      minItems: 0
      maxItems: 1000000
    articleArray:
      description: An array of articles objects
      type: array
      items: {$ref: "#/components/schemas/article"}
      minItems: 0
      maxItems: 1000


paths:

  /session/:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details.
        content:
          application/json: 
            schema: 
              description: A username object
              type: object 
              properties:
                username: {$ref: "#/components/schemas/username"}
        required: true 
      responses:
        '201':
          description: User log-in action successful.
          content:
              application/json: 
                schema: {$ref: "#/components/schemas/access-token"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/:
    parameters:
    - $ref: "#/components/parameters/username"
    put:
      security:
        - bearerAuth: []
      tags: ["username"]
      summary: Changes username.
      description: |-
        If the user in path is relative to the user authenticated 
        then changes his username to the one given in request body.
      operationId: setMyUserName
      requestBody:
        description: new username
        content:
          application/json:
            schema:
              description: The new username to set
              type: object 
              properties:
                username: {$ref: "#/components/schemas/username"}
        required: true
      responses:
        "200":
          description: Username changed successfully.
          content: 
            application/json:
              schema: {$ref: "#/components/schemas/access-token"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "409": {$ref: "#/components/responses/UsernameNotAvailable"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    get:
      security:
        - bearerAuth: []
      tags: ["profile"]
      summary: Returns the profile page of username given in path.
      description: |-
        Takes in path a username, if exists and user authenticated is not banned by username then returns in content his personal profile page
        with the user's photos (in reverse chronological order), the user's followers and following.
      operationId: getUserProfile
      responses:
        "200":
          description: Profile is returned correctly.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/profile"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}
              
  /users/{username}/media/: 
    parameters:
      - $ref: "#/components/parameters/username"
    post:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: Upload a new photo
      description: |-
        Adds a photo to the profile in path if matches the one authenticated.
      operationId: uploadPhoto
      requestBody:
        description: Photo details
        content:
          multipart/form-data:
            schema:
              description: An object containing the photo file and its caption
              type: object
              properties:
                photoCaption: {$ref: "#/components/schemas/photoCaption"}
                photoFile: {$ref: "#/components/schemas/photoFile"}
        required: true

      responses:
        "201":
          description: photo uploaded successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/media/{photo-id}/:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/username"
    
    get:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: get photo
      description: Returns the photo file according to the path, if user authenticated is not banned by username in path
      operationId: getPhoto
      responses:
        "200":
          description: Photo returned successfully
          content:
            image/png:
              schema: {$ref: "#/components/schemas/photoFile"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}
    delete:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: delete photo
      description: |-
        If user authenticated matches username in path and photo-id matches a photo uploaded by username then deletes it.
      operationId: deletePhoto
      responses:
        "204":
          description: Photo deleted successfully
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"} 
  
  /users/{username}/media/{photo-id}/likes/:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Returns likes
      description: Returns a list of the users that like the photo with photo-id given, 
        posted by username in path, if user authenticated is not banned by username.
      operationId: getLikes
      responses:
        "200":
          description: List is returned successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/media/{photo-id}/likes/{userLike}/:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/userLike"
    put:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Likes the photo
      description: |- 
        The user authenticated {userLike} sets a like to the photo with photo-id given, 
        posted by username {username} in path; if userLike is not banned by username.
      operationId: likePhoto
      responses:
        "201":
          description: Liked successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    delete:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Unlikes the photo
      description: |-
        The user authenticated {userLike} if liked the photo with photo-id given, 
        posted by username in path {username}, removes the like; if userLike is not banned by username.
      operationId: unlikePhoto
      responses:
        "204":
          description: Unliked successfully.
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/media/{photo-id}/comments/:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/username"
    get:
      tags: ["comments"]
      security:
        - bearerAuth: []
      summary: Returns comments
      description: Returns a list of comments objects (in reverse chronological order) relative to the photo with photo-id given, 
        posted by username in path; if user authenticated is not banned by username.
      operationId: getComments
      responses:
        "200":
          description: List is returned successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/commentArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    post:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: Comments the photo
      description: |- 
        The user authenticated posts a comment to the photo in path posted by username with 
        text given in content; if user authenticated is not banned by username. Returns the comment id.
      operationId: commentPhoto
      requestBody:
        description: The text of the comment (max 250 chars)
        content:
          application/json:
            schema: 
              type: object
              description: The text of the comment
              properties:
                text: {$ref: "#/components/schemas/commentText"}
        required: true
      responses:
        "201":
          description: Commented successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/id"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/media/{photo-id}/comments/{comment-id}/:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/comment-id"
      - $ref: "#/components/parameters/username"
    delete:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: Removes comment
      description: |-
        If the user authenticated has posted the photo with photo-id, 
        comment relative to comment-id in path is removed.
      operationId: uncommentPhoto
      responses:
        "204":
          description: Comment removed successfully from the photo
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
  
  /users/{username}/following/:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: Get following
      description: Returns the users followed by username; if user authenticated is not banned by username
      operationId: getFollowing
      responses:
        "200":
          description: Array of usernames
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/following/{userFollow}/:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/userFollow"
    put:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: Follows a user
      description: |-
        Account authenticated {username} starts follow {userFollow}; if userFollow is not banned by username and username is not equal to userFollow.
      operationId: followUser
      responses:
        "201":
          description: Followed successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "409": {$ref: "#/components/responses/UsernameNotAvailable"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    delete:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: unfollow
      description: |-
        If the account authenticated {username} follows {userfolloW} then unfollows; if userFollow is not banned by username.
      operationId: unfollowUser
      responses:
        "204":
          description: Unfollowed successfully      
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/followers/:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: Get followers
      description: Returns the users that follow username; if user authenticated is not banned by username
      operationId: getFollowers
      responses:
        "200":
          description: Array of usernames
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/ban/{userBan}/:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/userBan"
    put:
      security:
        - bearerAuth: []
      tags: ["ban"]
      summary: ban a user
      description: |-
        User authenticated {username} bans username {userBan}, if username is not equal to userBan and
        if it doesn't exist returns an error.
      operationId: banUser
      responses:
        "201":
          description: Banned successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/username"}        
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    delete:
      tags: ["ban"]
      summary: unban
      security:
        - bearerAuth: []
      description: |-
        If {userBan} is banned by the account authenticated {username} then is unbanned.
      operationId: unbanUser
      responses:
        "204":
          description: Unbanned successfully     
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /users/{username}/ban/:
    parameters:
    - $ref: "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []
      tags: ["ban"]
      summary: Get banned
      description: Returns the users banned by user authenticated (username)
      operationId: getBanned
      responses:
        "200":
          description: Array of users banned
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /stream/:
    get:
      security:
        - bearerAuth: []
      tags: ["stream"]
      summary: My stream
      description: |
        Returns the stream of the user authenticated.
        The stream is made by a list of articles (photo, username that posted it likes and comments) relative to all user followed by user in reverse chronological order.
      operationId: getMyStream
      responses:
        "200":
          description: Stream returned successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/articleArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}