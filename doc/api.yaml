openapi: 3.0.3 
info:
  title: WASAPhoto backend REST APIs
  description: |-
    Keep in touch with your friends by sharing photos of special moments, 
    thanks to WASAPhoto! You can upload your photos directly from your PC, 
    and they will be visible to everyone following you.
  version: "0.0.1"
components:
  securitySchemes:
    bearerAuth:
      description: API authentication to authorize requests
      type: http
      scheme: bearer

  responses:
    BadRequest: 
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    InternalServerError: 
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    NotFound:
          description: Not Found, user with such ID does not exist.
    UsernameNotAvailable:
      description: The username is not available
    UnauthorizedError:
      description: Access token is missing or invalid

  parameters:
    username:
      schema:
        type: string 
        pattern: |-
          ^(?=.{3,16}$)[a-zA-Z0-9._]+$
        minLength: 3 
        maxLength: 16
        example: Maria 
      name: username
      in: path 
      required: true
    photo-id:
      schema:
        type: integer
        example: 1
      name: photo-id
      in: path
      required: true
    comment-id:
      schema:
        type: integer
        example: 1
      name: comment-id
      in: path
      required: true

  schemas:
    posinteger:
      title: Positive integer
      type: integer
      minimum: 0
      example: 1
    username:
      title: Username
      type: string
      pattern: 'Ë†.*?$' 
      minLength: 3 
      maxLength: 16
      example: Maria 
    access-token:
      title: Authorization-token
      description: The user identifier for the authorization
      type: object
      properties:
        identifier:
          type: string
          example: "abcdef012345"
    photo:
      title: Photo
      description: An object containing the photo file, its unique id, user that posted and a caption
      type: object
      properties:
        id:
          description: Unique image identifier
          type: integer
          example: 1
          readOnly: true
        timestamp: {$ref: "#/components/schemas/timestamp"}
        username: {$ref: "#/components/schemas/username"}
        caption:
          description: The image's caption
          type: string
          example: "Visiting CERN"
    profileStats:
      title: Profile Statistics
      properties:
        n_photos_uploaded: {$ref: "#/components/schemas/posinteger"}
        followers:
          type: array
          items: {$ref: "#/components/schemas/username"}
        followed: 
          type: array
          items: {$ref: "#/components/schemas/username"}
    article:
      title: Post of the stream
      description: |- 
        A photo with the user that posted it, likes and comments.
      properties:
        photo: {$ref: "#/components/schemas/photo"}
        user: {$ref: "#/components/schemas/username"}
        likes: 
          type: array
          items: {$ref: "#/components/schemas/username"}
        comments: 
          type: array
          items: {$ref: "#/components/schemas/comment"}
    profile:
      title: Profile
      description: An object describing user's profile
      type: object
      properties:
        name: {$ref: "#/components/schemas/username"}
        photos:
          type: array
          items: {$ref: "#/components/schemas/photo"}
        stats: {$ref: "#/components/schemas/profileStats"}
    comment:
      title: Comment
      description: An object with username, text and timestamp of publication of the comment
      type: object
      properties:
        user: {$ref: "#/components/schemas/username"}
        text: {$ref: "#/components/schemas/commentText"}
        timestamp: {$ref: "#/components/schemas/timestamp"}
        id: {$ref: "#/components/schemas/posinteger"}
    timestamp:
      title: Timestamp
      type: string
      format: date-time
      example: "2022-05-23T08:00:00"
      readOnly: true
    commentText:
      type: string
      maxLength: 250


paths:

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json: 
            schema: 
              type: object 
              properties:
                name: {$ref: "#/components/schemas/username"}
        required: true 
      responses:
        '201':
          description: User log-in action successful 
          content:
              application/json: 
                schema: {$ref: "#/components/schemas/access-token"}
                


  /stream/:
    get:
      security:
        - bearerAuth: []
      tags: ["stream"]
      summary: My stream
      description: |-
        Returns the stream of the user relative to the bearerAuth.
        The stream is made by a list of photos with username that posted it, likes and comments.
      operationId: getMyStream
      responses:
        "200":
          description: Stream returned successfully
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/article"}
  /{username}/:
    put:
      parameters:
        - $ref: "#/components/parameters/username"
      security:
        - bearerAuth: []
      tags: ["username"]
      summary: Changes username
      description: |-
        If the username in path is relative to the user authenticated, 
        changes the username to the given one.
      operationId: setMyUsername
      requestBody:
        description: new username
        content:
          application/json:
            schema:
              type: object 
              properties:
                name: {$ref: "#/components/schemas/username"}
        required: true
      responses:
        "200":
          description: Username changed successfully
          content: 
            application/json:
              schema: {$ref: "#/components/schemas/access-token"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        "409": {$ref: "#/components/responses/UsernameNotAvailable"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    get:
      parameters: 
        - $ref: "#/components/parameters/username"
      security:
        - bearerAuth: []
      tags: ["profile"]
      summary: Returns the profile page of username given in path
      description: |-
        Takes in path a username and returns in content his personal profile page
      operationId: getUserProfile
      responses:
        "200":
          description: Profile is returned correctly
          content:
            application/json:
              schema: {$ref: "#/components/schemas/profile"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}
              
  /media/: 
    post:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: Upload a new photo
      description: |-
        Adds a photo to the profile's stream of photos (profile relative to the token given as bearerAuth)
      operationId: uploadPhoto
      requestBody:
        description: Photo details
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photoInfo: {$ref: "#/components/schemas/photo"}
                photoFile:
                  type: string
                  format: binary
        required: true

      responses:
        "201":
          description: photo uploaded successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /media/{photo-id}:
    parameters:
      - $ref: "#/components/parameters/photo-id"
    delete:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: delete photo
      description: If id-photo given is correct then deletes the photo
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"} 
  
  /media/{photo-id}/likes:
    parameters:
      - $ref: "#/components/parameters/photo-id"
    get:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Returns a list of the users that like the photo in path
      operationId: getLikes
      responses:
        "200":
          description: List is returned successfully
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "404": {$ref: "#/components/responses/NotFound"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}
    post:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: like the photo
      description: |- 
        The user, relative to the bearerAuth given, sets a like to the photo in path 
      operationId: likePhoto
      responses:
        "200":
          description: Liked successfully
        "400": {$ref: "#/components/responses/BadRequest"}
        "404": {$ref: "#/components/responses/NotFound"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}
    delete:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: unlike the photo
      description: |-
        The user, relative to the bearerAuth given, if liked the photo in path
        removes it
      operationId: unlikePhoto
      responses:
        "200":
          description: Unliked successfully
        "400": {$ref: "#/components/responses/BadRequest"}
        "404": {$ref: "#/components/responses/NotFound"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /media/{photo-id}/comments:
    parameters:
      - $ref: "#/components/parameters/photo-id"
    
    get:
      tags: ["comments"]
      security:
        - bearerAuth: []
      summary: Returns a list of comments objects relative to the photo in path
      operationId: getComments
      responses:
        "200":
          description: List is returned successfully
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/comment"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "404": {$ref: "#/components/responses/NotFound"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    post:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: comment the photo
      description: |- 
        The user, relative to the bearerAuth given, posts comments the photo in path with 
        text given in content. Returns the comment with his id in content
      operationId: commentPhoto
      requestBody:
        description: The text of the comment (max 250 chars)
        content:
          application/json:
            schema: 
              type: object
              properties:
                text: {$ref: "#/components/schemas/commentText"}
        required: true
      responses:
        "200":
          description: Commented successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                    comment: {$ref: "#/components/schemas/comment"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "404": {$ref: "#/components/responses/NotFound"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /media/{photo-id}/comments/{comment-id}/:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/comment-id"
    
    delete:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: remove comment
      description: |-
        If the user relative to bearerAuth has posted the photo with photo-id then 
        the comment with comment-is is removed
      operationId: removeComment
      responses:
        "200":
          description: Comment removed successfully from the photo, returned the photo 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  photo: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "404": {$ref: "#/components/responses/NotFound"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /follow/:
    post:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: follow a user
      description: |-
        If the account relative to bearerAuth doesn't follow username given in body request
        then starts follow, else if username given in input doesn't exist returns an error
      operationId: followUser
      requestBody:
        description: The username to follow
        content:
          application/json:
            schema: 
              type: object
              properties:
                user: {$ref: "#/components/schemas/username"}
      responses:
        "201":
          description: Followed successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    get:
      tags: ["follow"]
      summary: List of all following
      description: Returns the list of users followed by account relative to bearerAuth 
      operationId: getFollowing
      responses:
        "200": 
          description: List of following
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/username" }
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: "#/components/responses/UnauthorizedError"}
        "500": {$ref: "#/components/responses/InternalServerError"}
          
  /follow/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    delete:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: unfollow
      description: |-
        Takes in path a username, if it doesn't exist returns an error,
        if the account relative to bearerAuth token follows username 
        then unfollows
      operationId: unfollowUser
      responses:
        "200":
          description: Unfollowed successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}       
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: "#/components/responses/UnauthorizedError"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /ban/:
    post:
      security:
        - bearerAuth: []
      tags: ["ban"]
      summary: ban a user
      description: |-
        User relative to bearerAuth given bans username given in input, 
        if it doesn't exist returns an error
      operationId: banUser
      requestBody:
        description: The username to ban
        content:
          application/json:
            schema:
              type: object
              properties:
                user: {$ref: "#/components/schemas/username"}
      responses:
        "201":
          description: Banned successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: "#/components/responses/UnauthorizedError"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    get:
      tags: ["ban"]
      summary: List of all users banned
      description: Returns the list of users banned by account relative to bearerAuth 
      operationId: getBanned
      responses:
        "200": 
          description: List of banned
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/username" }
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: "#/components/responses/UnauthorizedError"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /ban/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    delete:
      tags: ["ban"]
      summary: unban
      description: |-
        Takes in path a username, if it doesn't exist returns an error,
        if username is banned by the account relative to the bearerAuth then unbans 
      operationId: unbanUser
      responses:
        "200":
          description: Unbanned successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}       
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: "#/components/responses/UnauthorizedError"}
        "500": {$ref: "#/components/responses/InternalServerError"}