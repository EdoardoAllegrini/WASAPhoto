tags:
  - name: "login"
    description: Log in
  - name: "username"
    description: Username operations
  - name: "media"
    description: Media operations
  - name: "profile"
    description: Profile operations
  - name: "likes"
    description: Likes operations
  - name: "comments"
    description: Comments operations
  - name: "follow"
    description: Follow operations
  - name: "ban"
    description: Ban operations
  - name: "stream"
    description: Stream operations
openapi: 3.0.3 
info:
  title: WASAPhoto backend REST APIs
  description: |-
    Keep in touch with your friends by sharing photos of special moments, 
    thanks to WASAPhoto! You can upload your photos directly from your PC, 
    and they will be visible to everyone following you.
  version: "0.0.1"
components:
  securitySchemes:
    bearerAuth:
      description: API authentication to authorize requests
      type: http
      scheme: bearer

  responses:
    BadRequest: 
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    InternalServerError: 
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    NotFound:
      description: Page not found.
    UsernameNotAvailable:
      description: The username is not available.
    UnauthorizedError:
      description: Access token is missing or invalid.
  parameters:
    username:
      schema:
        type: string 
        pattern: |-
          ^(?=.{3,16}$)[a-zA-Z0-9._]+$
        minLength: 3 
        maxLength: 16
        description: A user
        example: Maria 
      name: username
      in: path 
      required: true
    photo-id:
      schema:
        description: ID of a photo
        type: integer
        example: 1
      name: photo-id
      in: path
      required: true
    comment-id:
      schema:
        description: ID of a comment
        type: integer
        example: 1
      name: comment-id
      in: path
      required: true

  schemas:
    posinteger:
      description: A positive integer
      title: Positive integer
      type: integer
      minimum: 0
      example: 1
    username:
      title: Username
      description: The username
      type: string
      pattern: |-
        ^(?=.{3,16}$)[a-zA-Z0-9._]+$
      minLength: 3 
      maxLength: 16
      example: Maria 
    access-token:
      title: Authorization-token
      description: The user identifier for the authorization.
      type: object
      properties:
        identifier:
          type: string
          description: The user identifier
          example: "abcdef012345"
          pattern: ".*"
          minLength: 3
          maxLength: 16
    id:
      description: Unique identifier.
      type: integer
      example: 1
      readOnly: true
    photo:
      title: Photo
      description: |-
        An object containing the photo file, its unique id, user that posted a caption
        and the timestamp.
      type: object
      properties:
        id: {$ref: "#/components/schemas/id"}
        photo-file: {$ref: "#/components/schemas/photoFile"}
        timestamp: {$ref: "#/components/schemas/timestamp"}
        username: {$ref: "#/components/schemas/username"}
        caption: {$ref: "#/components/schemas/photoCaption"}
    photoCaption:
      description: The image's caption.
      type: string
      example: "Visiting CERN"
      pattern: ".*"
      minLength: 1
      maxLength: 250
    photoFile:
      type: string
      format: binary
      description: The photo file
      pattern: ".*"
      minLength: 0
      maxLength: 10000000000000
    profileStats:
      title: Profile Statistics
      description: The profile statistics
      properties:
        followers: {$ref: "#/components/schemas/userArray"}
        following: {$ref: "#/components/schemas/userArray"}
    article:
      title: A post of the stream
      description: |- 
        A photo with the user that posted it, likes and comments.
      properties:
        photo: {$ref: "#/components/schemas/photo"}
        likes: {$ref: "#/components/schemas/userArray"}
        comments: {$ref: "#/components/schemas/commentArray"}
    commentArray:
      description: An array of comments
      type: array
      items: {$ref: "#/components/schemas/comment"}
      minItems: 0
      maxItems: 1000000
    profile:
      title: Profile
      description: An object describing user's profile.
      type: object
      properties:
        profile-name: {$ref: "#/components/schemas/username"}
        photos:
          type: array
          description: An array of photos
          items: {$ref: "#/components/schemas/photo"}
          minItems: 0
          maxItems: 5000
        n_photos: {$ref: "#/components/schemas/posinteger"}
        stats: {$ref: "#/components/schemas/profileStats"}
    comment:
      title: Comment
      description: An object with username, text and timestamp of publication of the comment.
      type: object
      properties:
        user: {$ref: "#/components/schemas/username"}
        text: {$ref: "#/components/schemas/commentText"}
        timestamp: {$ref: "#/components/schemas/timestamp"}
        id: {$ref: "#/components/schemas/id"}
    timestamp:
      title: Timestamp
      description: The timestamp 
      type: string
      minLength: 19
      maxLength: 19
      format: date-time
      pattern: |-
        [0-9]{1,4}-[0-9]{1,2}-[0-9]{1,2}T[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}
      example: "2022-05-23T08:00:00"
      readOnly: true
    commentText:
      type: string
      description: The text of the comment
      pattern: ".*"
      minLength: 1
      maxLength: 250
      example: Nice photo!
    userArray:
      type: array
      description: An array of users
      items: {$ref: "#/components/schemas/username"}
      minItems: 0
      maxItems: 5000000



paths:

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details.
        content:
          application/json: 
            schema: 
              description: A username object
              type: object 
              properties:
                name: {$ref: "#/components/schemas/username"}
        required: true 
      responses:
        '201':
          description: User log-in action successful.
          content:
              application/json: 
                schema: {$ref: "#/components/schemas/access-token"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}



  /{username}/:
    parameters:
    - $ref: "#/components/parameters/username"
    put:
      security:
        - bearerAuth: []
      tags: ["username"]
      summary: Changes username.
      description: |-
        If the user in path is relative to the user authenticated 
        then changes his username to the one given in request body.
      operationId: setMyUserName
      requestBody:
        description: new username
        content:
          application/json:
            schema:
              description: The new username to set
              type: object 
              properties:
                name: {$ref: "#/components/schemas/username"}
        required: true
      responses:
        "200":
          description: Username changed successfully.
          content: 
            application/json:
              schema: {$ref: "#/components/schemas/access-token"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "409": {$ref: "#/components/responses/UsernameNotAvailable"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    get:
      security:
        - bearerAuth: []
      tags: ["profile"]
      summary: Returns the profile page of username given in path.
      description: |-
        Takes in path a username and if exists returns in content his personal profile page
        with the user's photos (in reverse chronological order), 
        how many photos have been uploaded, the user's followers and following.
      operationId: getUserProfile
      responses:
        "200":
          description: Profile is returned correctly.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/profile"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}
              
  /{username}/media/: 
    parameters:
      - $ref: "#/components/parameters/username"
    post:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: Upload a new photo
      description: |-
        Adds a photo to the profile in path if matches the one authenticated.
      operationId: uploadPhoto
      requestBody:
        description: Photo details
        content:
          multipart/form-data:
            schema:
              description: An object containing the photo file and its caption
              type: object
              properties:
                photoCaption: {$ref: "#/components/schemas/photoCaption"}
                photoFile: {$ref: "#/components/schemas/photoFile"}
        required: true

      responses:
        "201":
          description: photo uploaded successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /{username}/media/{photo-id}:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/username"
    delete:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: delete photo
      description: |-
        If id-photo given is correct then deletes the photo from the profile in path if matches the one
        authenticated.
      operationId: deletePhoto
      responses:
        "204":
          description: Photo deleted successfully
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"} 
  
  /{username}/media/{photo-id}/likes:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Returns likes
      description: Returns a list of the users that like the photo with photo-id given, 
        posted by username in path.
      operationId: getLikes
      responses:
        "200":
          description: List is returned successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    post:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Likes the photo
      description: |- 
        The user authenticated sets a like to the photo with photo-id given, 
        posted by username in path.
      operationId: likePhoto
      responses:
        "201":
          description: Liked successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    delete:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Unlikes the photo
      description: |-
        The user authenticated if liked the photo with photo-id given, 
        posted by username in path, removes the like.
      operationId: unlikePhoto
      responses:
        "204":
          description: Unliked successfully.
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /{username}/media/{photo-id}/comments:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/username"
    get:
      tags: ["comments"]
      security:
        - bearerAuth: []
      summary: Returns comments
      description: Returns a list of comments objects relative to the photo with photo-id given, 
        posted by username in path.
      operationId: getComments
      responses:
        "200":
          description: List is returned successfully.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/commentArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    post:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: Comments the photo
      description: |- 
        The user authenticated posts a comment to the photo in path with 
        text given in content. Returns the comment object.
      operationId: commentPhoto
      requestBody:
        description: The text of the comment (max 250 chars)
        content:
          application/json:
            schema: 
              type: object
              description: The text of the comment
              properties:
                text: {$ref: "#/components/schemas/commentText"}
        required: true
      responses:
        "201":
          description: Commented successfully.
          content:
            application/json:
              schema:
                description: The comment published
                type: object
                properties:
                    comment: {$ref: "#/components/schemas/comment"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /{username}/media/{photo-id}/comments/{comment-id}/:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/comment-id"
      - $ref: "#/components/parameters/username"
    delete:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: Removes comment
      description: |-
        If the user authenticated has posted the photo, 
        comment relative to the one given in path is removed.
      operationId: uncommentPhoto
      responses:
        "204":
          description: Comment removed successfully from the photo
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /{username}/follow/:
    post:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: Follows a user
      description: |-
        If the account authenticated, which is the same one in path, doesn't follow existent user given in body request
        then starts follow.
      operationId: followUser
      requestBody:
        description: The username to follow
        content:
          application/json:
            schema: 
              description: The user to follow
              type: object
              properties:
                user: {$ref: "#/components/schemas/username"}
      responses:
        "201":
          description: Followed successfully
          content: 
            application/json:
              schema:
                type: object
                description: The username followed
                properties:
                  user: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    get:
      tags: ["follow"]
      summary: List of all following users
      description: Returns the list of users followed by account authenticated, which is the same one in path.
      operationId: getFollowing
      responses:
        "200": 
          description: List of following.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
          
  /{username}/follow/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    delete:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: unfollow
      description: |-
        Takes in path a username (second variable), if it doesn't exist returns an error,
        if the account authenticated follows username then unfollows.
      operationId: unfollowUser
      responses:
        "204":
          description: Unfollowed successfully      
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /{username}/ban/:
    post:
      security:
        - bearerAuth: []
      tags: ["ban"]
      summary: ban a user
      description: |-
        User authenticated which is the same one in path, bans username given in body,
        if it doesn't exist returns an error.
      operationId: banUser
      requestBody:
        description: The username to ban
        content:
          application/json:
            schema:
              description: The user to ban
              type: object
              properties:
                user: {$ref: "#/components/schemas/username"}
      responses:
        "201":
          description: Banned successfully
          content: 
            application/json:
              schema:
                description: The username banned
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    get:
      tags: ["ban"]
      summary: List of all users banned
      description: Returns the list of users banned by account authenticated.
      operationId: getBanned
      responses:
        "200": 
          description: List of banned
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userArray"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /{username}/ban/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    delete:
      tags: ["ban"]
      summary: unban
      description: |-
        Takes in path a username (second argument), if it doesn't exist returns an error,
        if username is banned by the account authenticated then is unbanned.
      operationId: unbanUser
      responses:
        "204":
          description: Unbanned successfully     
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /stream/:
    get:
      security:
        - bearerAuth: []
      tags: ["stream"]
      summary: My stream
      description: |
        Returns the stream of the user authenticated.
        The stream is made by a list of articles with photo, username that posted it likes and comments.
      operationId: getMyStream
      responses:
        "200":
          description: Stream returned successfully
          content:
            application/json:
              schema:
                description: An array of articles objects
                type: array
                items: {$ref: "#/components/schemas/article"}
                minItems: 0
                maxItems: 1000
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}