openapi: 3.0.3 
info:
  title: WASAPhoto backend REST APIs
  description: |-
    Keep in touch with your friends by sharing photos of special moments, 
    thanks to WASAPhoto! You can upload your photos directly from your PC, 
    and they will be visible to everyone following you.
  version: "0.0.1"
components:
  securitySchemes:
    bearerAuth:
      description: API authentication to authorize requests
      type: http
      scheme: bearer

  responses:
    BadRequest: 
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    InternalServerError: 
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    NotFound:
          description: Page not found.
    UsernameNotAvailable:
      description: The username is not available
    UnauthorizedError:
      description: Access token is missing or invalid

  parameters:
    username:
      schema:
        type: string 
        pattern: |-
          ^(?=.{3,16}$)[a-zA-Z0-9._]+$
        minLength: 3 
        maxLength: 16
        example: Maria 
      name: username
      in: path 
      required: true
    photo-id:
      schema:
        type: integer
        example: 1
      name: photo-id
      in: path
      required: true
    comment-id:
      schema:
        type: integer
        example: 1
      name: comment-id
      in: path
      required: true

  schemas:
    posinteger:
      title: Positive integer
      type: integer
      minimum: 0
      example: 1
    username:
      title: Username
      type: string
      pattern: |-
        ^(?=.{3,16}$)[a-zA-Z0-9._]+$
      minLength: 3 
      maxLength: 16
      example: Maria 
    access-token:
      title: Authorization-token
      description: The user identifier for the authorization
      type: object
      properties:
        identifier:
          type: string
          example: "abcdef012345"
    photo:
      title: Photo
      description: |-
        An object containing the photo file, its unique id, user that posted a caption
        and the timestamp 
      type: object
      properties:
        id:
          description: Unique image identifier
          type: integer
          example: 1
          readOnly: true
        photo-file: {$ref: "#/components/schemas/photoFile"}
        timestamp: {$ref: "#/components/schemas/timestamp"}
        username: {$ref: "#/components/schemas/username"}
        caption: {$ref: "#/components/schemas/photoCaption"}
    photoCaption:
      description: The image's caption
      type: string
      example: "Visiting CERN"
    photoFile:
      type: string
      format: byte
    profileStats:
      title: Profile Statistics
      properties:
        followers:
          type: array
          items: {$ref: "#/components/schemas/username"}
        followed: 
          type: array
          items: {$ref: "#/components/schemas/username"}
    article:
      title: A post of the stream
      description: |- 
        A photo with the user that posted it, likes and comments.
      properties:
        photo: {$ref: "#/components/schemas/photo"}
        likes: 
          type: array
          items: {$ref: "#/components/schemas/username"}
        comments: 
          type: array
          items: {$ref: "#/components/schemas/comment"}
    profile:
      title: Profile
      description: An object describing user's profile
      type: object
      properties:
        profile-name: {$ref: "#/components/schemas/username"}
        photos:
          type: array
          items: {$ref: "#/components/schemas/photo"}
        n_photos: 
          type: integer
          minimum: 0
        stats: {$ref: "#/components/schemas/profileStats"}
    comment:
      title: Comment
      description: An object with username, text and timestamp of publication of the comment
      type: object
      properties:
        user: {$ref: "#/components/schemas/username"}
        text: {$ref: "#/components/schemas/commentText"}
        timestamp: {$ref: "#/components/schemas/timestamp"}
        id: {$ref: "#/components/schemas/posinteger"}
    timestamp:
      title: Timestamp
      type: string
      format: date-time
      example: "2022-05-23T08:00:00"
      readOnly: true
    commentText:
      type: string
      maxLength: 250
      example: Nice photo!


paths:

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json: 
            schema: 
              type: object 
              properties:
                name: {$ref: "#/components/schemas/username"}
        required: true 
      responses:
        '201':
          description: User log-in action successful 
          content:
              application/json: 
                schema: {$ref: "#/components/schemas/access-token"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /stream/:
    get:
      security:
        - bearerAuth: []
      tags: ["stream"]
      summary: My stream
      description: |-
        Returns the stream of the user authenticated.
        The stream is made by a list of articles with photo, username that posted it likes and comments.
      operationId: getMyStream
      responses:
        "200":
          description: Stream returned successfully
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/article"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /{username}/:
    put:
      parameters:
        - $ref: "#/components/parameters/username"
      security:
        - bearerAuth: []
      tags: ["username"]
      summary: Changes username
      description: |-
        If the user in path is relative to the user authenticated 
        then changes his username to the one given in request body.
      operationId: setMyUsername
      requestBody:
        description: new username
        content:
          application/json:
            schema:
              type: object 
              properties:
                name: {$ref: "#/components/schemas/username"}
        required: true
      responses:
        "200":
          description: Username changed successfully
          content: 
            application/json:
              schema: {$ref: "#/components/schemas/access-token"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "409": {$ref: "#/components/responses/UsernameNotAvailable"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    get:
      parameters: 
        - $ref: "#/components/parameters/username"
      security:
        - bearerAuth: []
      tags: ["profile"]
      summary: Returns the profile page of username given in path
      description: |-
        Takes in path a username and returns in content his personal profile page
        with the user's photos (in reverse chronological order), 
        how many photos have been uploaded, and the user's followers and following.
      operationId: getUserProfile
      responses:
        "200":
          description: Profile is returned correctly
          content:
            application/json:
              schema: {$ref: "#/components/schemas/profile"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"}
              
  /media/: 
    post:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: Upload a new photo
      description: |-
        Adds a photo to the stream of profile authenticated
      operationId: uploadPhoto
      requestBody:
        description: Photo details
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photoCaption: {$ref: "#/components/schemas/photoCaption"}
                photoFile: {$ref: "#/components/schemas/photoFile"}
        required: true

      responses:
        "201":
          description: photo uploaded successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /media/{photo-id}:
    parameters:
      - $ref: "#/components/parameters/photo-id"
    delete:
      security:
        - bearerAuth: []
      tags: ["media"]
      summary: delete photo
      description: If id-photo given is correct then deletes the photo from the profile of user authenticated
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully
        "400": {$ref: "#/components/responses/BadRequest"}
        '401': {$ref: '#/components/responses/UnauthorizedError'}
        '404': {$ref: '#/components/responses/NotFound'}
        "500": {$ref: "#/components/responses/InternalServerError"} 
  
  /media/{photo-id}/likes:
    parameters:
      - $ref: "#/components/parameters/photo-id"
    get:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: Returns a list of the users that like the photo in path
      operationId: getLikes
      responses:
        "200":
          description: List is returned successfully
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    post:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: like the photo
      description: |- 
        The user authenticated sets a like to the photo in path 
      operationId: likePhoto
      responses:
        "200":
          description: Liked successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

    delete:
      security:
        - bearerAuth: []
      tags: ["likes"]
      summary: unlike the photo
      description: |-
        The user authenticated if liked the photo in path removes the like
      operationId: unlikePhoto
      responses:
        "200":
          description: Unliked successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /media/{photo-id}/comments:
    parameters:
      - $ref: "#/components/parameters/photo-id"
    
    get:
      tags: ["comments"]
      security:
        - bearerAuth: []
      summary: Returns a list of comments objects relative to the photo in path
      operationId: getComments
      responses:
        "200":
          description: List is returned successfully
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/comment"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    post:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: comment the photo
      description: |- 
        The user authenticated posts a comment to the photo in path with 
        text given in content. Returns the comment object
      operationId: commentPhoto
      requestBody:
        description: The text of the comment (max 250 chars)
        content:
          application/json:
            schema: 
              type: object
              properties:
                text: {$ref: "#/components/schemas/commentText"}
        required: true
      responses:
        "200":
          description: Commented successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                    comment: {$ref: "#/components/schemas/comment"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /media/{photo-id}/comments/{comment-id}/:
    parameters:
      - $ref: "#/components/parameters/photo-id"
      - $ref: "#/components/parameters/comment-id"
    
    delete:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: remove comment
      description: |-
        If the user authenticated has posted the photo, 
        comment relative to the one given in path is removed
      operationId: removeComment
      responses:
        "200":
          description: Comment removed successfully from the photo, returned the photo 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  photo: {$ref: "#/components/schemas/photo"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /follow/:
    post:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: follow a user
      description: |-
        If the account authenticated doesn't follow existent user given in body request
        then starts follow
      operationId: followUser
      requestBody:
        description: The username to follow
        content:
          application/json:
            schema: 
              type: object
              properties:
                user: {$ref: "#/components/schemas/username"}
      responses:
        "201":
          description: Followed successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    get:
      tags: ["follow"]
      summary: List of all following
      description: Returns the list of users followed by account authenticated
      operationId: getFollowing
      responses:
        "200": 
          description: List of following
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/username" }
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
          
  /follow/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    delete:
      security:
        - bearerAuth: []
      tags: ["follow"]
      summary: unfollow
      description: |-
        Takes in path a username, if it doesn't exist returns an error,
        if the account authenticated follows username then unfollows
      operationId: unfollowUser
      responses:
        "200":
          description: Unfollowed successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}       
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /ban/:
    post:
      security:
        - bearerAuth: []
      tags: ["ban"]
      summary: ban a user
      description: |-
        User authenticated bans username given in input, 
        if it doesn't exist returns an error
      operationId: banUser
      requestBody:
        description: The username to ban
        content:
          application/json:
            schema:
              type: object
              properties:
                user: {$ref: "#/components/schemas/username"}
      responses:
        "201":
          description: Banned successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
    get:
      tags: ["ban"]
      summary: List of all users banned
      description: Returns the list of users banned by account authenticated 
      operationId: getBanned
      responses:
        "200": 
          description: List of banned
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/username" }
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}

  /ban/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    delete:
      tags: ["ban"]
      summary: unban
      description: |-
        Takes in path a username, if it doesn't exist returns an error,
        if username is banned by the account authenticated then is unbanned
      operationId: unbanUser
      responses:
        "200":
          description: Unbanned successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user: {$ref: "#/components/schemas/username"}       
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: '#/components/responses/UnauthorizedError'}
        "404": {$ref: "#/components/responses/NotFound"}
        "500": {$ref: "#/components/responses/InternalServerError"}
